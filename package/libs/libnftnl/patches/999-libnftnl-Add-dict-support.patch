From 31df758e1c860b194785b36567b5520de89489f6 Mon Sep 17 00:00:00 2001
From: Brett Mastbergen <bmastbergen@untangle.com>
Date: Mon, 25 Jun 2018 10:55:14 -0400
Subject: [PATCH] libnftnl: Add dict support

---
 include/libnftnl/expr.h             |  13 +
 include/linux/netfilter/nf_tables.h |  17 ++
 src/Makefile.am                     |   1 +
 src/expr/dict.c                     | 465 ++++++++++++++++++++++++++++++++++++
 src/expr_ops.c                      |   2 +
 5 files changed, 498 insertions(+)
 create mode 100644 src/expr/dict.c

diff --git a/include/libnftnl/expr.h b/include/libnftnl/expr.h
index 219104e..f21d669 100644
--- a/include/libnftnl/expr.h
+++ b/include/libnftnl/expr.h
@@ -203,6 +203,19 @@ enum {
 };
 
 enum {
+	NFTNL_EXPR_DICT_SREG	= NFTNL_EXPR_BASE,
+	NFTNL_EXPR_DICT_DREG,
+	NFTNL_EXPR_DICT_TYPE,
+	NFTNL_EXPR_DICT_TABLE,
+	NFTNL_EXPR_DICT_FIELD,
+	NFTNL_EXPR_DICT_VALUE,
+	NFTNL_EXPR_DICT_LEN,
+	NFTNL_EXPR_DICT_SIZE,
+	NFTNL_EXPR_DICT_SET,
+	NFTNL_EXPR_DICT_FLUSH,
+};
+
+enum {
 	NFTNL_EXPR_QUEUE_NUM	= NFTNL_EXPR_BASE,
 	NFTNL_EXPR_QUEUE_TOTAL,
 	NFTNL_EXPR_QUEUE_FLAGS,
diff --git a/include/linux/netfilter/nf_tables.h b/include/linux/netfilter/nf_tables.h
index 4d8eea4..3b2e77f 100644
--- a/include/linux/netfilter/nf_tables.h
+++ b/include/linux/netfilter/nf_tables.h
@@ -1533,4 +1533,21 @@ enum nft_ng_types {
 };
 #define NFT_NG_MAX	(__NFT_NG_MAX - 1)
 
+enum nft_dict_attributes {
+	NFTA_DICT_UNSPEC,
+	NFTA_DICT_SREG,
+	NFTA_DICT_DREG,
+	NFTA_DICT_TYPE,
+	NFTA_DICT_TABLE,
+	NFTA_DICT_FIELD,
+	NFTA_DICT_VALUE,
+	NFTA_DICT_LEN,
+	NFTA_DICT_SIZE,
+	NFTA_DICT_SET,
+	NFTA_DICT_FLUSH,
+	__NFTA_DICT_MAX,
+};
+
+#define NFTA_DICT_MAX (__NFTA_DICT_MAX - 1)
+
 #endif /* _LINUX_NF_TABLES_H */
diff --git a/src/Makefile.am b/src/Makefile.am
index c66a257..731c6f2 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -38,6 +38,7 @@ libnftnl_la_SOURCES = utils.c		\
 		      expr/fwd.c	\
 		      expr/limit.c	\
 		      expr/log.c	\
+		      expr/dict.c	\
 		      expr/lookup.c	\
 		      expr/dynset.c	\
 		      expr/immediate.c	\
diff --git a/src/expr/dict.c b/src/expr/dict.c
new file mode 100644
index 0000000..4b041ee
--- /dev/null
+++ b/src/expr/dict.c
@@ -0,0 +1,465 @@
+#include <stdio.h>
+#include <stdint.h>
+#include <string.h>
+#include <arpa/inet.h>
+#include <errno.h>
+#include <linux/netfilter/nf_tables.h>
+
+#include "internal.h"
+#include <libmnl/libmnl.h>
+#include <libnftnl/expr.h>
+#include <libnftnl/rule.h>
+
+struct nftnl_expr_dict {
+	enum nft_registers	sreg;
+	enum nft_registers	dreg;
+	const char		*table;
+	const char		*field;
+	const char		*value;
+	unsigned int		type;
+	unsigned int		len;
+	unsigned int		size;
+	enum nft_registers	set;
+	unsigned int		flush;
+};
+
+static int nftnl_expr_dict_set(struct nftnl_expr *e, uint16_t type,
+				 const void *data, uint32_t data_len)
+{
+	struct nftnl_expr_dict *dict = nftnl_expr_data(e);
+	switch(type){
+	case NFTNL_EXPR_DICT_SREG:
+		dict->sreg = *((uint32_t *)data);
+		break;
+	case NFTNL_EXPR_DICT_DREG:
+		dict->dreg = *((uint32_t *)data);
+		break;
+	case NFTNL_EXPR_DICT_TYPE:
+		dict->type = *((uint32_t *)data);
+		break;
+	case NFTNL_EXPR_DICT_LEN:
+		dict->len = *((uint32_t *)data);
+		break;
+	case NFTNL_EXPR_DICT_SIZE:
+		dict->size = *((uint32_t *)data);
+		break;
+	case NFTNL_EXPR_DICT_TABLE:
+		dict->table = strdup(data);
+		if (!dict->table)
+			return -1;
+		break;
+	case NFTNL_EXPR_DICT_FIELD:
+		dict->field = strdup(data);
+		if (!dict->field)
+			return -1;
+		break;
+	case NFTNL_EXPR_DICT_VALUE:
+		dict->value = strdup(data);
+		if (!dict->value)
+			return -1;
+		break;
+	case NFTNL_EXPR_DICT_SET:
+		dict->set = *((uint32_t *)data);
+		break;
+	case NFTNL_EXPR_DICT_FLUSH:
+		dict->flush = *((uint32_t *)data);
+		break;
+	}
+	return 0;
+}
+
+static const void *
+nftnl_expr_dict_get(const struct nftnl_expr *e, uint16_t type,
+		      uint32_t *data_len)
+{
+	struct nftnl_expr_dict *dict = nftnl_expr_data(e);
+
+	switch(type) {
+	case NFTNL_EXPR_DICT_SREG:
+		*data_len = sizeof(dict->sreg);
+		return &dict->sreg;
+	case NFTNL_EXPR_DICT_DREG:
+		*data_len = sizeof(dict->dreg);
+		return &dict->dreg;
+	case NFTNL_EXPR_DICT_TYPE:
+		*data_len = sizeof(dict->type);
+		return &dict->type;
+	case NFTNL_EXPR_DICT_LEN:
+		*data_len = sizeof(dict->len);
+		return &dict->type;
+	case NFTNL_EXPR_DICT_SIZE:
+		*data_len = sizeof(dict->size);
+		return &dict->size;
+	case NFTNL_EXPR_DICT_TABLE:
+		*data_len = strlen(dict->table)+1;
+		return dict->table;
+	case NFTNL_EXPR_DICT_FIELD:
+		*data_len = strlen(dict->field)+1;
+		return dict->field;
+	case NFTNL_EXPR_DICT_VALUE:
+		*data_len = strlen(dict->value)+1;
+		return dict->value;
+	case NFTNL_EXPR_DICT_SET:
+		*data_len = sizeof(dict->set);
+		return &dict->set;
+	case NFTNL_EXPR_DICT_FLUSH:
+		*data_len = sizeof(dict->flush);
+		return &dict->flush;
+	}
+	return NULL;
+}
+
+static int nftnl_expr_dict_cb(const struct nlattr *attr, void *data)
+{
+	const struct nlattr **tb = data;
+	int type = mnl_attr_get_type(attr);
+
+	if (mnl_attr_type_valid(attr, NFTA_DICT_MAX) < 0)
+		return MNL_CB_OK;
+
+	switch(type) {
+	case NFTNL_EXPR_DICT_SREG:
+		if (mnl_attr_validate(attr, MNL_TYPE_U32) < 0)
+			abi_breakage();
+		break;
+	case NFTNL_EXPR_DICT_DREG:
+		if (mnl_attr_validate(attr, MNL_TYPE_U32) < 0)
+			abi_breakage();
+		break;
+	case NFTNL_EXPR_DICT_TYPE:
+		if (mnl_attr_validate(attr, MNL_TYPE_U32) < 0)
+			abi_breakage();
+		break;
+	case NFTNL_EXPR_DICT_LEN:
+		if (mnl_attr_validate(attr, MNL_TYPE_U32) < 0)
+			abi_breakage();
+		break;
+	case NFTNL_EXPR_DICT_SIZE:
+		if (mnl_attr_validate(attr, MNL_TYPE_U32) < 0)
+			abi_breakage();
+		break;
+	case NFTNL_EXPR_DICT_TABLE:
+		if (mnl_attr_validate(attr, MNL_TYPE_STRING) < 0)
+			abi_breakage();
+		break;
+	case NFTNL_EXPR_DICT_FIELD:
+		if (mnl_attr_validate(attr, MNL_TYPE_STRING) < 0)
+			abi_breakage();
+		break;
+	case NFTNL_EXPR_DICT_VALUE:
+		if (mnl_attr_validate(attr, MNL_TYPE_STRING) < 0)
+			abi_breakage();
+		break;
+	case NFTNL_EXPR_DICT_SET:
+		if (mnl_attr_validate(attr, MNL_TYPE_U32) < 0)
+			abi_breakage();
+		break;
+	case NFTNL_EXPR_DICT_FLUSH:
+		if (mnl_attr_validate(attr, MNL_TYPE_U32) < 0)
+			abi_breakage();
+		break;
+	}
+
+	tb[type] = attr;
+	return MNL_CB_OK;
+}
+
+static void
+nftnl_expr_dict_build(struct nlmsghdr *nlh, const struct nftnl_expr *e)
+{
+	struct nftnl_expr_dict *dict = nftnl_expr_data(e);
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_SREG))
+		mnl_attr_put_u32(nlh, NFTNL_EXPR_DICT_SREG, htonl(dict->sreg));
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_DREG))
+		mnl_attr_put_u32(nlh, NFTNL_EXPR_DICT_DREG, htonl(dict->dreg));
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_TYPE))
+		mnl_attr_put_u32(nlh, NFTNL_EXPR_DICT_TYPE, htonl(dict->type));
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_LEN))
+		mnl_attr_put_u32(nlh, NFTNL_EXPR_DICT_LEN, htonl(dict->len));
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_SIZE))
+		mnl_attr_put_u32(nlh, NFTNL_EXPR_DICT_SIZE, htonl(dict->size));
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_TABLE))
+		mnl_attr_put_strz(nlh, NFTNL_EXPR_DICT_TABLE, dict->table);
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_FIELD))
+		mnl_attr_put_strz(nlh, NFTNL_EXPR_DICT_FIELD, dict->field);
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_VALUE))
+		mnl_attr_put_strz(nlh, NFTNL_EXPR_DICT_VALUE, dict->value);
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_SET))
+		mnl_attr_put_u32(nlh, NFTNL_EXPR_DICT_SET, htonl(dict->set));
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_FLUSH))
+		mnl_attr_put_u32(nlh, NFTNL_EXPR_DICT_FLUSH, htonl(dict->flush));
+}
+
+static int
+nftnl_expr_dict_parse(struct nftnl_expr *e, struct nlattr *attr)
+{
+	struct nftnl_expr_dict *dict = nftnl_expr_data(e);
+	struct nlattr *tb[NFTA_DICT_MAX+1] = {};
+
+	if (mnl_attr_parse_nested(attr, nftnl_expr_dict_cb, tb) < 0)
+		return -1;
+
+	if (tb[NFTNL_EXPR_DICT_SREG]) {
+		dict->sreg = ntohl(mnl_attr_get_u32(tb[NFTNL_EXPR_DICT_SREG]));
+		e->flags |= (1 << NFTNL_EXPR_DICT_SREG);
+	}
+
+	if (tb[NFTNL_EXPR_DICT_DREG]) {
+		dict->dreg = ntohl(mnl_attr_get_u32(tb[NFTNL_EXPR_DICT_DREG]));
+		e->flags |= (1 << NFTNL_EXPR_DICT_DREG);
+	}
+
+	if (tb[NFTNL_EXPR_DICT_TYPE]) {
+		dict->type = ntohl(mnl_attr_get_u32(tb[NFTNL_EXPR_DICT_TYPE]));
+		e->flags |= (1 << NFTNL_EXPR_DICT_TYPE);
+	}
+
+	if (tb[NFTNL_EXPR_DICT_LEN]) {
+		dict->len = ntohl(mnl_attr_get_u32(tb[NFTNL_EXPR_DICT_LEN]));
+		e->flags |= (1 << NFTNL_EXPR_DICT_LEN);
+	}
+
+	if (tb[NFTNL_EXPR_DICT_SIZE]) {
+		dict->size = ntohl(mnl_attr_get_u32(tb[NFTNL_EXPR_DICT_SIZE]));
+		e->flags |= (1 << NFTNL_EXPR_DICT_SIZE);
+	}
+
+	if (tb[NFTNL_EXPR_DICT_TABLE]) {
+		if (dict->table)
+			xfree(dict->table);
+
+		dict->table = strdup(mnl_attr_get_str(tb[NFTNL_EXPR_DICT_TABLE]));
+		if (!dict->table)
+			return -1;
+		e->flags |= (1 << NFTNL_EXPR_DICT_TABLE);
+	}
+
+	if (tb[NFTNL_EXPR_DICT_FIELD]) {
+		if (dict->field)
+			xfree(dict->field);
+
+		dict->field = strdup(mnl_attr_get_str(tb[NFTNL_EXPR_DICT_FIELD]));
+		if (!dict->field)
+			return -1;
+		e->flags |= (1 << NFTNL_EXPR_DICT_FIELD);
+	}
+
+	if (tb[NFTNL_EXPR_DICT_VALUE]) {
+		if (dict->value)
+			xfree(dict->value);
+
+		dict->value = strdup(mnl_attr_get_str(tb[NFTNL_EXPR_DICT_VALUE]));
+		if (!dict->value)
+			return -1;
+		e->flags |= (1 << NFTNL_EXPR_DICT_VALUE);
+	}
+
+	if (tb[NFTNL_EXPR_DICT_SET]) {
+		dict->set = ntohl(mnl_attr_get_u32(tb[NFTNL_EXPR_DICT_SET]));
+		e->flags |= (1 << NFTNL_EXPR_DICT_SET);
+	}
+
+	if (tb[NFTNL_EXPR_DICT_FLUSH]) {
+		dict->flush = ntohl(mnl_attr_get_u32(tb[NFTNL_EXPR_DICT_FLUSH]));
+		e->flags |= (1 << NFTNL_EXPR_DICT_FLUSH);
+	}
+
+	return 0;
+}
+
+static int nftnl_expr_dict_json_parse(struct nftnl_expr *e, json_t *root,
+					struct nftnl_parse_err *err)
+{
+#ifdef JSON_PARSING
+	const char *field, *value, *table;
+	uint32_t sreg, dreg, type, len, size, set, flush;
+
+	if (nftnl_jansson_parse_val(root, "sreg", NFTNL_TYPE_U32,
+				    &sreg, err) == 0)
+		nftnl_expr_set_u32(e, NFTNL_EXPR_DICT_SREG, sreg);
+
+	if (nftnl_jansson_parse_val(root, "dreg", NFTNL_TYPE_U32,
+				    &dreg, err) == 0)
+		nftnl_expr_set_u32(e, NFTNL_EXPR_DICT_DREG, dreg);
+
+	if (nftnl_jansson_parse_val(root, "type", NFTNL_TYPE_U32,
+				    &type, err) == 0)
+		nftnl_expr_set_u32(e, NFTNL_EXPR_DICT_TYPE, type);
+
+	if (nftnl_jansson_parse_val(root, "len", NFTNL_TYPE_U32,
+				    &len, err) == 0)
+		nftnl_expr_set_u32(e, NFTNL_EXPR_DICT_LEN, len);
+
+	if (nftnl_jansson_parse_val(root, "size", NFTNL_TYPE_U32,
+				    &size, err) == 0)
+		nftnl_expr_set_u32(e, NFTNL_EXPR_DICT_SIZE, size);
+
+	table = nftnl_jansson_parse_str(root, "table", err);
+	if (table != NULL)
+		nftnl_expr_set_str(e, NFTNL_EXPR_DICT_TABLE, table);
+
+	field = nftnl_jansson_parse_str(root, "field", err);
+	if (field != NULL)
+		nftnl_expr_set_str(e, NFTNL_EXPR_DICT_FIELD, field);
+
+	value = nftnl_jansson_parse_str(root, "value", err);
+	if (value != NULL)
+		nftnl_expr_set_str(e, NFTNL_EXPR_DICT_VALUE, value);
+
+	if (nftnl_jansson_parse_val(root, "set", NFTNL_TYPE_U32,
+				    &set, err) == 0)
+		nftnl_expr_set_u32(e, NFTNL_EXPR_DICT_SET, set);
+
+	if (nftnl_jansson_parse_val(root, "flush", NFTNL_TYPE_U32,
+				    &set, err) == 0)
+		nftnl_expr_set_u32(e, NFTNL_EXPR_DICT_FLUSH, flush);
+
+	return 0;
+#else
+	errno = EOPNOTSUPP;
+	return -1;
+#endif
+}
+
+static int nftnl_expr_dict_snprintf_default(char *buf, size_t size,
+					   const struct nftnl_expr *e)
+{
+	struct nftnl_expr_dict *dict = nftnl_expr_data(e);
+	int remain = size, ret, offset = 0;
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_DREG)) {
+		ret = snprintf(buf, remain, "reg %u = reg %u ", dict->dreg, dict->sreg);
+		SNPRINTF_BUFFER_SIZE(ret, remain, offset);
+	} else {
+		ret = snprintf(buf, remain, "reg %u ", dict->sreg);
+		SNPRINTF_BUFFER_SIZE(ret, remain, offset);
+	}
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_TABLE)) {
+		ret = snprintf(buf + offset, remain, "table %s ", dict->table);
+		SNPRINTF_BUFFER_SIZE(ret, remain, offset);
+	}
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_FIELD)) {
+		ret = snprintf(buf + offset, remain, "field %s ", dict->field);
+		SNPRINTF_BUFFER_SIZE(ret, remain, offset);
+	}
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_TYPE)) {
+		ret = snprintf(buf + offset, remain, "type %u ", dict->type);
+		SNPRINTF_BUFFER_SIZE(ret, remain, offset);
+	}
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_VALUE)) {
+		ret = snprintf(buf + offset, remain, "value %s ", dict->value);
+		SNPRINTF_BUFFER_SIZE(ret, remain, offset);
+	}
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_SET)) {
+		ret = snprintf(buf + offset, remain, "set %u ", dict->set);
+		SNPRINTF_BUFFER_SIZE(ret, remain, offset);
+	}
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_FLUSH)) {
+		ret = snprintf(buf + offset, remain, "flush");
+		SNPRINTF_BUFFER_SIZE(ret, remain, offset);
+	}
+
+	return offset;
+}
+
+static int nftnl_expr_dict_export(char *buf, size_t size,
+				 const struct nftnl_expr *e, int type)
+{
+	struct nftnl_expr_dict *dict = nftnl_expr_data(e);
+	NFTNL_BUF_INIT(b, buf, size);
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_SREG))
+		nftnl_buf_u32(&b, type, dict->sreg, SREG);
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_DREG))
+		nftnl_buf_u32(&b, type, dict->dreg, DREG);
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_TYPE))
+		nftnl_buf_u32(&b, type, dict->type, TYPE);
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_LEN))
+		nftnl_buf_u32(&b, type, dict->len, LEN);
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_SIZE))
+		nftnl_buf_u32(&b, type, dict->size, SIZE);
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_TABLE))
+		nftnl_buf_str(&b, type, dict->table, "table");
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_FIELD))
+		nftnl_buf_str(&b, type, dict->field, "field");
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_VALUE))
+		nftnl_buf_str(&b, type, dict->value, "value");
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_SET))
+		nftnl_buf_u32(&b, type, dict->set, SET);
+
+	if (e->flags & (1 << NFTNL_EXPR_DICT_FLUSH))
+		nftnl_buf_u32(&b, type, dict->flush, FLUSH);
+
+	return nftnl_buf_done(&b);
+}
+
+static int
+nftnl_expr_dict_snprintf(char *buf, size_t len, uint32_t type,
+			uint32_t flags, const struct nftnl_expr *e)
+{
+	switch(type) {
+	case NFTNL_OUTPUT_DEFAULT:
+		return nftnl_expr_dict_snprintf_default(buf, len, e);
+	case NFTNL_OUTPUT_XML:
+	case NFTNL_OUTPUT_JSON:
+		return nftnl_expr_dict_export(buf, len, e, type);
+	default:
+		break;
+	}
+	return -1;
+}
+
+static void nftnl_expr_dict_free(const struct nftnl_expr *e)
+{
+	struct nftnl_expr_dict *dict = nftnl_expr_data(e);
+
+	xfree(dict->table);
+	xfree(dict->field);
+	xfree(dict->value);
+}
+
+static bool nftnl_expr_dict_cmp(const struct nftnl_expr *e1,
+				     const struct nftnl_expr *e2)
+{
+	struct nftnl_expr_dict *l1 = nftnl_expr_data(e1);
+	struct nftnl_expr_dict *l2 = nftnl_expr_data(e2);
+	return (l1->sreg == l2->sreg) && (l1->dreg == l2->dreg) && (l1->type == l2->type) && (l1->size == l2->size) && !strcmp(l1->table, l2->table) && !strcmp(l1->field, l2->field) && !strcmp(l1->value, l2->value) && (l1->set == l2->set) && (l1->flush == l2->flush);
+}
+
+struct expr_ops expr_ops_dict = {
+	.name		= "dict",
+	.alloc_len	= sizeof(struct nftnl_expr_dict),
+	.max_attr	= NFTA_DICT_MAX,
+	.free		= nftnl_expr_dict_free,
+	.cmp		= nftnl_expr_dict_cmp,
+	.set		= nftnl_expr_dict_set,
+	.get		= nftnl_expr_dict_get,
+	.parse		= nftnl_expr_dict_parse,
+	.build		= nftnl_expr_dict_build,
+	.snprintf	= nftnl_expr_dict_snprintf,
+	.json_parse	= nftnl_expr_dict_json_parse,
+};
diff --git a/src/expr_ops.c b/src/expr_ops.c
index cbb2a1b..fefcd03 100644
--- a/src/expr_ops.c
+++ b/src/expr_ops.c
@@ -36,6 +36,7 @@ extern struct expr_ops expr_ops_hash;
 extern struct expr_ops expr_ops_hash;
 extern struct expr_ops expr_ops_fib;
 extern struct expr_ops expr_ops_flow;
+extern struct expr_ops expr_ops_dict;
 
 static struct expr_ops expr_ops_notrack = {
 	.name	= "notrack",
@@ -75,6 +76,7 @@ static struct expr_ops *expr_ops[] = {
 	&expr_ops_fib,
 	&expr_ops_objref,
 	&expr_ops_flow,
+	&expr_ops_dict,
 	NULL,
 };
 
-- 
2.11.0

