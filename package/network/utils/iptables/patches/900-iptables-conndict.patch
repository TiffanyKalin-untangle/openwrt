From 319e6f4e36647d0dd53b7c28cd1d49b48f1d28c4 Mon Sep 17 00:00:00 2001
From: Brett Mastbergen <bmastbergen@untangle.com>
Date: Mon, 12 Feb 2018 13:45:15 -0500
Subject: [PATCH] iptables conndict

---
 extensions/libxt_conndict.c   | 144 ++++++++++++++++++++++++++++++++++++++++++
 extensions/libxt_conndict.man |  14 ++++
 2 files changed, 158 insertions(+)
 create mode 100644 extensions/libxt_conndict.c
 create mode 100644 extensions/libxt_conndict.man

diff --git a/extensions/libxt_conndict.c b/extensions/libxt_conndict.c
new file mode 100644
index 00000000..b78acfaf
--- /dev/null
+++ b/extensions/libxt_conndict.c
@@ -0,0 +1,144 @@
+/* Shared library add-on to iptables to add string matching support. 
+ * 
+ * Copyright (C) 2000 Emmanuel Roger  <winfield@freegates.be>
+ *
+ * 2005-08-05 Pablo Neira Ayuso <pablo@eurodev.net>
+ * 	- reimplemented to use new string matching iptables match
+ * 	- add functionality to match packets by using window offsets
+ * 	- add functionality to select the string matching algorithm
+ *
+ * ChangeLog
+ *     29.12.2003: Michael Rash <mbr@cipherdyne.org>
+ *             Fixed iptables save/restore for ascii strings
+ *             that contain space chars, and hex strings that
+ *             contain embedded NULL chars.  Updated to print
+ *             strings in hex mode if any non-printable char
+ *             is contained within the string.
+ *
+ *     27.01.2001: Gianni Tedesco <gianni@ecsc.co.uk>
+ *             Changed --tos to --string in save(). Also
+ *             updated to work with slightly modified
+ *             ipt_string_info.
+ */
+#define _GNU_SOURCE 1 /* strnlen for older glibcs */
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <ctype.h>
+#include <xtables.h>
+#include <linux/netfilter/xt_conndict.h>
+
+enum {
+	O_FIELD = 0,
+	O_VALUE,
+	O_SET,
+	F_FIELD      = 1 << O_FIELD,
+	F_VALUE      = 1 << O_VALUE,
+	F_SET        = 1 << O_SET,
+	F_OP_ANY     = F_FIELD | F_VALUE | F_SET,
+};
+
+static void dict_help(void)
+{
+	printf(
+"conndict match options:\n"
+"[!] --field string --value string    Match a string in a packet\n"
+"    --set                            Set field value pair on a connection");
+}
+
+#define s struct xt_dict_info
+static const struct xt_option_entry dict_opts[] = {
+	{.name = "field", .id = O_FIELD, .type = XTTYPE_STRING,
+	 .flags = XTOPT_INVERT | XTOPT_MAND | XTOPT_PUT, XTOPT_POINTER(s, field), .also = F_VALUE},
+	{.name = "value", .id = O_VALUE, .type = XTTYPE_STRING,
+	 .flags = XTOPT_INVERT | XTOPT_MAND | XTOPT_PUT, XTOPT_POINTER(s, value), .also = F_FIELD},
+	{.name = "set", .id = O_SET, .type = XTTYPE_NONE},
+	XTOPT_TABLEEND,
+};
+#undef s
+
+static void dict_init(struct xt_entry_match *m)
+{
+	struct xt_dict_info *i = (struct xt_dict_info *) m->data;
+	memset(i, 0, sizeof(*i));
+}
+
+static void dict_parse(struct xt_option_call *cb)
+{
+	struct xt_dict_info *dict_info = cb->data;
+
+	xtables_option_parse(cb);
+
+	if(cb->entry->id == O_SET) {
+		dict_info->flags |= XT_CONNDICT_FLAG_SET;
+		return;
+	}
+
+	if (cb->invert) {
+		dict_info->flags |= XT_CONNDICT_FLAG_INVERT;
+	}
+
+	dict_info->field_len = strnlen(dict_info->field, XT_CONNDICT_MAX_PATTERN_SIZE);
+	dict_info->value_len = strnlen(dict_info->value, XT_CONNDICT_MAX_PATTERN_SIZE);
+}
+
+static void dict_check(struct xt_fcheck_call *cb)
+{
+	if (!(cb->xflags & F_OP_ANY))
+		xtables_error(PARAMETER_PROBLEM,
+			   "conndict match: You must specify"
+			   "`--field' and `--value'");
+}
+
+static void
+dict_print(const void *ip, const struct xt_entry_match *match, int numeric)
+{
+	const struct xt_dict_info *info =
+	    (const struct xt_dict_info*) match->data;
+	int invert = info->flags & XT_CONNDICT_FLAG_INVERT;
+
+	printf(" conndict match %s FIELD \"%s\" VALUE \"%s\"", (invert) ? " !": "", info->field, info->value);
+
+	if(info->flags & XT_CONNDICT_FLAG_SET) {
+		printf(" set");
+	}
+}
+
+static void dict_save(const void *ip, const struct xt_entry_match *match)
+{
+	const struct xt_dict_info *info =
+	    (const struct xt_dict_info*) match->data;
+	int invert = info->flags & XT_CONNDICT_FLAG_INVERT;
+
+	printf("%s --field", (invert) ? " !": "");
+	xtables_save_string(info->field);
+	printf("--value");
+	xtables_save_string(info->value);
+
+	if(info->flags & XT_CONNDICT_FLAG_SET) {
+		printf(" --set");
+	}
+}
+
+static struct xtables_match string_mt_reg[] = {
+	{
+		.name          = "conndict",
+		.revision      = 0,
+		.family        = NFPROTO_UNSPEC,
+		.version       = XTABLES_VERSION,
+		.size          = XT_ALIGN(sizeof(struct xt_dict_info)),
+		.userspacesize = offsetof(struct xt_dict_info, field_hash),
+		.help          = dict_help,
+		.init          = dict_init,
+		.print         = dict_print,
+		.save          = dict_save,
+		.x6_parse      = dict_parse,
+		.x6_fcheck     = dict_check,
+		.x6_options    = dict_opts,
+	},
+};
+
+void _init(void)
+{
+	xtables_register_matches(string_mt_reg, ARRAY_SIZE(string_mt_reg));
+}
diff --git a/extensions/libxt_conndict.man b/extensions/libxt_conndict.man
new file mode 100644
index 00000000..1a5f8514
--- /dev/null
+++ b/extensions/libxt_conndict.man
@@ -0,0 +1,14 @@
+This modules matches a given field/value pair by using some pattern matching strategy. It requires a patch to the linux kernel.
+.TP
+[\fB!\fP] \fB\-\-field\fP \fIstring\fP \fB\-\-value\fP \fIstring\fP
+Defines the field and value to match
+.TP
+Examples:
+.IP
+# The --field and --value values can be used for exact matching.
+.br
+iptables \-A INPUT \-p tcp \-m session \-\-field 'username' \-\-field 'bob' \-j LOG
+.IP
+# The --field and --value values can also be used with wildcards.
+.br
+iptables \-A INPUT \-p tcp \-m session \-\-field 'username' \-\-field 'b*' \-j LOG
-- 
2.11.0

